ctrl+F = direct replacement of whole same type of keyword.
we can use directly bootstrap inside react.


when we create new file outside the src folder so this is run inside the terminal.
steps for exicution -> 1) find the path 2) node .\file_name with extention .mjs


inside the app.jsx defined arrow function is returns only one tag.


when we do any changes so it refres whole code by default.


export by default, who is contains arrow function,means where whole code is define. it is used end of the code.
syntax -> export default variable_name



function based component -> These are simply JavaScript functions that return JSX (the UI).
it is static type, it means it does not shows any changes.
Key Features : 
Simpler syntax.
Use React Hooks (useState, useEffect, etc.) to manage state and lifecycle.
Recommended for modern React development.

class based component -> These are ES6 classes that extend React.Component.
it is dynamic type, it means when we change anythink inside the code so this shows wffects inside the user interface.
Key Features :
Have access to lifecycle methods (componentDidMount, componentDidUpdate, etc.).
Use this.state and this.setState() for state management.
More verbose syntax.
Still supported, but not preferred for new projects.



JSX -> JSX (JavaScript XML) is a syntax extension used in React that lets you write HTML-like code inside JavaScript.
It makes writing UI components easier and more readable.
key Points : 
JSX looks like HTML, but it's actually JavaScript.
You can embed JavaScript in JSX using {}.
You must use className instead of class, and htmlFor instead of for.
JSX must return one root element.
why use JSX :
JSX looks like HTML, but it's actually JavaScript.
You can embed JavaScript in JSX using {}.
You must use className instead of class, and htmlFor instead of for.
JSX must return one root element.




router ->




useState -> useState used for minimal projects. it gets one parameter.
useReducer -> useReducer used for complex projects. it gets two parameter.it takes first function name nad other is value.




props -> 
main.jsx --> app.jsx --> home.jsx 
props shares data from parent to child by default,and its vise-versa does not work.
data shares from main to app and app to home, but main does not shares direct any data from main to home.
home does not shares any data from home to app/main. 

//props:::::    Properties  :::sharing of properties between two files i.e { from parent to child by default }

// main.jsx <---App.jsx<--- home.jsx
//data flow direction----------------->>
// here home is child of parent app and main
// data can only be shared by PARENTS TO CHILD AND NOT CHILD TO PARENT

// then here main can share data with app and home 
// app can share data with home
// but home cannot share any data with parents

//props drilling:::
// the problem that occurs when data is passed through multiple files between parent and child.
//  here the files in between are unncessaerily receiving the data as they are not linked directly.
//unnnecessary passing of data in the components of a file

///solution to props drilling:::createContext:manages states::creates a central library





qusetions -> what is usestate, useEffect, props
problem -> props driling